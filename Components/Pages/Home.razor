@page "/"
@using System.Globalization
@using System.Reflection.Metadata
@using System.Xml.Linq
@using Microsoft.EntityFrameworkCore
@using Microsoft.VisualBasic
@using ReservationCalendar.Components.Data
@using ReservationCalendar.Components.Models
@using ReservationCalendar.Components.Services
@using Radzen
@rendermode InteractiveServer
@inject Services.CalendarServices CalendarServices
@inject Radzen.NotificationService notificationService
@inject DataContext DataContext

<PageTitle>Home</PageTitle>

<div>
    <NavLink class="btn btn-primary" href="/adminpage">Go to Admin Page</NavLink>
</div>
<div class="reservationForm">
    <EditForm Model="@reservation" OnValidSubmit="BookTraining">
        <div class="UserDataForm">
            <label>Podaj Imię: </label>
            <InputText placeholder="Imię" @bind-Value="user.FirstName"></InputText>
            <br />
            <br />
            <label>Podaj Nazwisko: </label>
            <InputText placeholder="Nazwisko" @bind-Value="user.LastName"></InputText>
            <br />
            <br />
            <label>Podaj Numer Telefonu: </label>
            <InputText placeholder="Numer Telefonu" @bind-Value="user.PhoneNumber"></InputText>
            <br />
            <br />
        </div>
        <div class="TrainerSelection">
            <label>Proszę wybrać trenera</label>
            <InputSelect @bind-Value="trainerId">
                @foreach (var trainer in trainers)
                {
                    <option value="@trainer.TrainerId">@trainer.TrainerName @trainer.TrainerLastName</option>
                }
            </InputSelect>
        </div>
        <div class="ReservationDate">
            <label>Proszę wybrać datę rezerwacji</label>
            <div class="rz-p-12 rz-text-align-center">
                <RadzenDatePicker @bind-Value="reservationDate" Inline="true" />
            </div>
        </div>
        <div class="availableHours">
            @foreach (var hour in availableHours)
            {
                <button class="hour-button @(selectedHour == hour ? "selected" : "")" @onclick="() => SelectHour(hour)">
                    @hour.ToString(@"hh\:mm")
                </button>
            }
        </div>
        <button type="submit" class="btn btn-success">Book Training</button>
        <p>@reservationDate</p>
        <p>@trainerId</p>
    </EditForm>
    <RadzenNotification @ref="notificationInstance"></RadzenNotification>
</div>
@code
{
    UsersModel user = new UsersModel();
    List<TrainerModel> trainers = new List<TrainerModel>();
    List<TimeSpan> availableHours = new List<TimeSpan>();
    private RadzenNotification notificationInstance;
    private TimeSpan sessionDuration = TimeSpan.FromHours(1.5);
    private TimeSpan selectedHour;
    private int _trainerId;
    public int trainerId
    {
        get => _trainerId;
        set
        {
            _trainerId = value;
            reservation.ReservationTrainerId = value;
            OnTrainerSelected(value);
        }
    }
    private DateTime _reservationDate = DateTime.Now;
    public DateTime reservationDate
    {
        get => _reservationDate;
        set
        {
            _reservationDate = value.Date;
            reservation.ReservationDate = value.Date;
            OnDateChange(value.Date);
        }
    }
    ReservationModel reservation = new ReservationModel
    {
        ReservationDate = DateTime.Now.Date
    };

    protected override async Task OnInitializedAsync()
    {
        trainers = await CalendarServices.GetTrainerList();
    }
    private void SelectHour(TimeSpan hour)
    {
        selectedHour = hour;
        reservation.ReservationStartTime = hour;
    }
    public async void OnDateChange(DateTime newDate)
    {
        if (trainerId != 0)
        {
            var availableTimeSpans = await CalendarServices.GetAvailableTimeSlots(trainerId, newDate, sessionDuration);
            availableHours = availableTimeSpans.ToList();
            StateHasChanged();
        }
    }

    private async void OnTrainerSelected(int id)
    {
        if (reservationDate != DateTime.MinValue)
        {
            var availableTimeSpans = await CalendarServices.GetAvailableTimeSlots(id, reservationDate, sessionDuration);
            availableHours = availableTimeSpans.ToList();
            StateHasChanged();
        }
    }
    private async Task BookTraining()
    {
        if (string.IsNullOrEmpty(user.FirstName) || string.IsNullOrEmpty(user.LastName) || string.IsNullOrEmpty(user.PhoneNumber) || trainerId == 0 || selectedHour == null)
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Proszę, wypełnij wszystkie pola." });
            return;
        }

        // Check if the selected time slot is still available
        var isAvailable = await CalendarServices.IsTimeSlotAvailable(trainerId, reservationDate, selectedHour, (selectedHour+sessionDuration));
        if (!isAvailable)
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Wybrana godzina jest juz nie dostępna." });
            return;
        }

        // Check if the user already exists
        var existingUser = await CalendarServices.GetUserByPhoneNumber(user.PhoneNumber);
        if (existingUser != null)
        {
            user = existingUser;
        }
        else
        {
            // Create a new user
            var newUser = new UsersModel
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                PhoneNumber = user.PhoneNumber
            };

            await CalendarServices.AddUser(newUser);
            user = newUser;
        }

        // Proceed with booking
        reservation.ReservationDate = reservationDate;
        reservation.ReservationStartTime = selectedHour;
        reservation.ReservationEndTime = selectedHour.Add(new TimeSpan(1, 30, 0));
        reservation.ReservationUserId = user.Id;
        reservation.ReservationTrainerId = trainerId;
        reservation.Status = "Oczekujące";
        

        await CalendarServices.BookTraining(reservation);
        notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Trening zarezerwowany pomyślnie!" });
        // Show success message or redirect to another page
    }
}
