@page "/adminpage"  
@using System.Globalization  
@using Microsoft.AspNetCore.Identity  
@using ReservationCalendar.Components.Models  
@using ReservationCalendar.Components.Services  
@inject Services.CalendarServices CalendarServices  
@inject Radzen.NotificationService notificationService  
<h3>Admin Page</h3>  

<EditForm Model="@availability">  
   <div>  
       <label>Select Trainer:</label>  
       <InputSelect @bind-Value="trainerId">  
           @foreach (var trainer in trainers)  
           {  
               <option value="@trainer.TrainerId">@trainer.TrainerName @trainer.TrainerLastName</option>  
           }  
       </InputSelect>  
   </div>  
   <div>  
       <div class="rz-p-12 rz-text-align-center">  
           <RadzenDatePicker @bind-Value="availability.AvailabilityDay" Inline="true" />  
       </div>  
   </div>  
   <div>  
       <label>Podaj godzinę rozpoczęcia:</label>  
       <InputText @bind-Value="StartTimeString" placeholder="np. 15:00" />  
   </div>  
   <div>  
       <label>Podaj godzinę zakończenia:</label>  
       <InputText @bind-Value="EndTimeString" placeholder="np 20:00" />  
   </div>  
   <button type="submit" @onclick="SaveAvailability">Save</button>  
</EditForm>  
@if ((trainerAvailabilityList != null && trainerAvailabilityList.Any()) || reservationList != null && reservationList.Any())  
{  
   <h4>Terminy</h4>  
   <ul>  
       @foreach (var availability in trainerAvailabilityList)  
       {  
           <li>  
               @availability.AvailabilityDay.ToString("dd/MM/yyyy") @availability.StartTime.ToString(@"hh\:mm") - @availability.EndTime.ToString(@"hh\:mm")  
               <button @onclick="() => EditAvailability(availability)">Edit</button>  
               <button @onclick="() => DeleteAvailability(availability.Id)">Delete</button>  
           </li>  
       }
   </ul>
   <h4>Rezerwacje</h4>
   <ul>
       @foreach (var reservation in reservationList)
       {
            if (reservation.ReservationTrainerId == trainerId)
            {
                var user = CalendarServices.GetUserName(reservation).Result;
               <li>
                   @user
                    @reservation.ReservationStartTime.ToString(@"hh\:mm")
                    - @reservation.ReservationEndTime.ToString(@"hh\:mm")
                   @reservation.ReservationDate.ToString("dd/MM/yyyy")
                   - @reservation.Status
                   <button @onclick="() => StatusChange(reservation)">Zmień status rezerwacji</button>
                   <button @onclick="() => DeleteReservation(reservation)">Usuń rezerwacje</button>
               </li>
           }
       }
   </ul>  
}
<RadzenNotification @ref="notificationInstance" />  
@code {
    private IEnumerable<TrainerModel> trainers = new List<TrainerModel>();  
    private TrainerAvailabilityModel availability = new TrainerAvailabilityModel();  
    private IEnumerable<TrainerAvailabilityModel> trainerAvailabilityList = new List<TrainerAvailabilityModel>();  
    private IEnumerable<ReservationModel> reservationList = new List<ReservationModel>();
    private IEnumerable<UsersModel> usersList = new List<UsersModel>();
    private RadzenNotification notificationInstance;
   private TimeSpan sessionDuration = TimeSpan.FromHours(1.5);
   
   protected override async Task OnInitializedAsync()
   {
       usersList = await CalendarServices.GetUsersList();
       trainers = await CalendarServices.GetTrainerList();
       reservationList = await CalendarServices.GetReservationList();
   }  
   private int _trainerId;  
   public int trainerId  
   {  
       get => _trainerId;  
       set  
       {  
           _trainerId = value;  
           availability.TrainerId= value;  
           OnTrainerSelected(value);  
       }  
   }  
   private string StartTimeString  
   {  
       get => availability.StartTime.ToString(@"hh\:mm");  
       set => availability.StartTime = TimeSpan.ParseExact(value, @"hh\:mm", CultureInfo.InvariantCulture);  
   }  

   private string EndTimeString  
   {  
       get => availability.EndTime.ToString(@"hh\:mm");  
       set => availability.EndTime = TimeSpan.ParseExact(value, @"hh\:mm", CultureInfo.InvariantCulture);  
   }

   private async Task StatusChange(ReservationModel selectedReservation)
   {
       await CalendarServices.StatusChange(selectedReservation);
   }

   private async Task DeleteReservation(ReservationModel selectedReservation)
   {
       await CalendarServices.DeleteReservation(selectedReservation);
       OnTrainerSelected(selectedReservation.ReservationTrainerId);
   }
   private async Task SaveAvailability()  
   {  
       if (availability.Id == 0)  
       {  
           notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Availability saved successfully!" });  
           await CalendarServices.SaveTrainerAvailability(availability);  
       }  
       else  
       {  
           notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Availability updated successfully!" });  
           await CalendarServices.UpdateTrainerAvailability(availability);  
       }  
       await OnTrainerSelected(trainerId);  
   }
   private async Task OnTrainerSelected(int trainerId)  
     {  
         trainerAvailabilityList = (await CalendarServices.GetTrainerAvailabilityList(trainerId)).OrderBy(a => a.AvailabilityDay).ToList();  
         reservationList = await CalendarServices.GetReservationList();  
         StateHasChanged();      
     }
   private void EditAvailability(TrainerAvailabilityModel selectedAvailability)  
   {  
       availability = selectedAvailability;  
       trainerId = selectedAvailability.TrainerId;  
       StartTimeString = selectedAvailability.StartTime.ToString(@"hh\:mm");  
       EndTimeString = selectedAvailability.EndTime.ToString(@"hh\:mm");  
   }  
   private async Task DeleteAvailability(int availabilityId)  
   {  
       await CalendarServices.DeleteTrainerAvailability(availabilityId);  
       notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Availability deleted successfully!" });  
       await OnTrainerSelected(trainerId); // Refresh the list after deleting  
   }
}